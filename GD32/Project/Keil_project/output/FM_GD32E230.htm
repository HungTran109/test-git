<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\FM_GD32E230.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\FM_GD32E230.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6140002: Last Updated: Tue Jun  4 16:46:41 2024
<BR><P>
<H3>Maximum Stack Usage =        768 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; InitSystem &rArr; FM_Init &rArr; KT_AMFM_WakeUp &rArr; KT_AMFM_Init &rArr; KT_Byte_Read &rArr; FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[11]">ADC_CMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">ADC_CMP_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[11]">ADC_CMP_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[e]">DMA_Channel0_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[f]">DMA_Channel1_2_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[10]">DMA_Channel3_4_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[2d]">DebugAddData</a> from debug.o(.text.DebugAddData) referenced from debug.o(.rodata.DriverDebug)
 <LI><a href="#[2b]">DebugInit</a> from debug.o(.text.DebugInit) referenced from debug.o(.rodata.DriverDebug)
 <LI><a href="#[2c]">DebugTick</a> from debug.o(.text.DebugTick) referenced from debug.o(.rodata.DriverDebug)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[9]">FMC_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from gd32e23x_it.o(.text.HardFault_Handler) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[20]">I2C0_ER_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[1a]">I2C0_EV_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[21]">I2C1_ER_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[1b]">I2C1_EV_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[7]">LVD_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from gd32e23x_it.o(.text.NMI_Handler) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from gd32e23x_it.o(.text.PendSV_Handler) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[a]">RCU_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[1c]">SPI0_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[1d]">SPI1_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from gd32e23x_it.o(.text.SVC_Handler) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from gd32e23x_it.o(.text.SysTick_Handler) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[23]">SystemInit</a> from system_gd32e23x.o(.text.SystemInit) referenced from startup_gd32e23x.o(.text)
 <LI><a href="#[12]">TIMER0_BRK_UP_TRG_COM_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[13]">TIMER0_Channel_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[16]">TIMER13_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[17]">TIMER14_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[18]">TIMER15_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[19]">TIMER16_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[14]">TIMER2_IRQHandler</a> from led7.o(.text.TIMER2_IRQHandler) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[15]">TIMER5_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[2e]">UART_Init</a> from driveruart.o(.text.UART_Init) referenced from driveruart.o(.rodata.DriverUART)
 <LI><a href="#[32]">UART_Printf</a> from driveruart.o(.text.UART_Printf) referenced from driveruart.o(.rodata.DriverUART)
 <LI><a href="#[31]">UART_Putb</a> from driveruart.o(.text.UART_Putb) referenced from driveruart.o(.rodata.DriverUART)
 <LI><a href="#[2f]">UART_Putc</a> from driveruart.o(.text.UART_Putc) referenced from driveruart.o(.rodata.DriverUART)
 <LI><a href="#[30]">UART_Puts</a> from driveruart.o(.text.UART_Puts) referenced from driveruart.o(.rodata.DriverUART)
 <LI><a href="#[1e]">USART0_IRQHandler</a> from gps.o(.text.USART0_IRQHandler) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[1f]">USART1_IRQHandler</a> from esp32datalayer.o(.text.USART1_IRQHandler) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[6]">WWDGT_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[24]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32e23x.o(.text)
 <LI><a href="#[26]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[25]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[2a]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[27]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[22]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[29]">rtt_debug_output</a> from main.o(.text.rtt_debug_output) referenced from main.o(.text.main)
 <LI><a href="#[28]">sys_get_ms</a> from main.o(.text.sys_get_ms) referenced from main.o(.text.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[24]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(.text)
</UL>
<P><STRONG><a name="[12c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[33]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[52]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[12d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[12e]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[12f]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[130]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[131]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>ADC_CMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA_Channel1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA_Channel3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER0_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIMER16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[27]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[108]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwrb_write
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwrb_read
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[134]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP32_ManagerTick
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwrb_init
</UL>

<P><STRONG><a name="[136]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[95]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_ManagerTick
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNewDebugData
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNewBlackboxData
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_ProcessNewMessage
</UL>

<P><STRONG><a name="[93]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindIndexOfChar
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidCheckSum
</UL>

<P><STRONG><a name="[107]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[d2]"></a>strtok</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNewBlackboxData
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_ProcessNewMessage
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_ProcessNewMessage
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_ProcessNewMessage
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_GetVolume
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volume_Tick
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_SetVolume
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_ProcessNewMessage
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_ProcessNewMessage
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volume_Tick
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_SetVolume
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_GetVolume
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volume_Tick
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_SetVolume
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_GetVolume
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP32_ManagerTick
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_ProcessNewMessage
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_ProcessNewMessage
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[138]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[139]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[13a]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[13b]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__strtod_int</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[13c]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[3a]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[42]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[41]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[34]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[13d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[56]"></a>_scanf_really_real</STRONG> (Thumb, 584 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[25]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>__aeabi_lmul</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[13e]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_ul2d</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[105]"></a>AVGADCVolume</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, button.o(.text.AVGADCVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = AVGADCVolume
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volume_Tick
</UL>

<P><STRONG><a name="[64]"></a>Button_Init</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, button.o(.text.Button_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Button_Init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystem
</UL>

<P><STRONG><a name="[65]"></a>Button_Tick</STRONG> (Thumb, 568 bytes, Stack size 80 bytes, button.o(.text.Button_Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = Button_Tick &rArr; XuLyPhimSetup &rArr; KT093x_User_FMTune &rArr; KT_FM_Tune &rArr; KT_AMFM_Mute &rArr; KT_Byte_Read &rArr; FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_get_ms
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispSetupMode
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XuLyPhimSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTimeout100ms
</UL>

<P><STRONG><a name="[75]"></a>CalculateCRC16</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, utilities.o(.text.CalculateCRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CalculateCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP32_ManagerTick
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNewBlackboxData
</UL>

<P><STRONG><a name="[6b]"></a>CopyParameter</STRONG> (Thumb, 220 bytes, Stack size 72 bytes, utilities.o(.text.CopyParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CopyParameter &rArr; FindIndexOfChar
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindIndexOfChar
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNewDebugData
</UL>

<P><STRONG><a name="[ec]"></a>Delay_Decrement</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(.text.Delay_Decrement))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[61]"></a>Delayms</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, main.o(.text.Delayms))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Delayms &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_wdt_feed
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_get_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystem
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_WriteConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_AMFM_WakeUp
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_AMFM_PreInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_AMFM_Init
</UL>

<P><STRONG><a name="[a8]"></a>DetectResetReason</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hardwaremanager.o(.text.DetectResetReason))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystem
</UL>

<P><STRONG><a name="[70]"></a>ESP32_ManagerTick</STRONG> (Thumb, 1036 bytes, Stack size 176 bytes, esp32datalayer.o(.text.ESP32_ManagerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = ESP32_ManagerTick &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_get_ms
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Puts
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_IsValid
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_GetPosition
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCRC16
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTimeout1000ms
</UL>

<P><STRONG><a name="[76]"></a>ESP32_UART_Tick</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, esp32datalayer.o(.text.ESP32_UART_Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ESP32_UART_Tick &rArr; ProcessNewBlackboxData &rArr; KT093x_User_FMTune &rArr; KT_FM_Tune &rArr; KT_AMFM_Mute &rArr; KT_Byte_Read &rArr; FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNewBlackboxData
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTimeout10ms
</UL>

<P><STRONG><a name="[78]"></a>FM_GetFMChanFreq</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, i2cfm.o(.text.FM_GetFMChanFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = FM_GetFMChanFreq &rArr; FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Tick
</UL>

<P><STRONG><a name="[7a]"></a>FM_GetRSSI</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, i2cfm.o(.text.FM_GetRSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = FM_GetRSSI &rArr; FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Tick
</UL>

<P><STRONG><a name="[7b]"></a>FM_GetSNR</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, i2cfm.o(.text.FM_GetSNR))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = FM_GetSNR &rArr; FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Tick
</UL>

<P><STRONG><a name="[7c]"></a>FM_GetStatus</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, i2cfm.o(.text.FM_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = FM_GetStatus &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_get_ms
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop_on_bus
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start_on_bus
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_addressing
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_clear
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack_config
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Init
</UL>

<P><STRONG><a name="[83]"></a>FM_GetVolume</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, i2cfm.o(.text.FM_GetVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = FM_GetVolume &rArr; FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_ReadReg
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Tick
</UL>

<P><STRONG><a name="[84]"></a>FM_Init</STRONG> (Thumb, 384 bytes, Stack size 96 bytes, i2cfm.o(.text.FM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = FM_Init &rArr; KT_AMFM_WakeUp &rArr; KT_AMFM_Init &rArr; KT_Byte_Read &rArr; FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_get_ms
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT093x_User_FMTune
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_AMFM_WakeUp
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_AMFM_SetMode
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_AMFM_PreInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT0935_LowLevel_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystem
</UL>

<P><STRONG><a name="[79]"></a>FM_ReadReg</STRONG> (Thumb, 872 bytes, Stack size 80 bytes, i2cfm.o(.text.FM_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_get_ms
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop_on_bus
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start_on_bus
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_addressing
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_clear
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_transmit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_receive
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ackpos_config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack_config
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Tick
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNewDebugData
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_Byte_Read
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_GetVolume
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_GetSNR
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_GetRSSI
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_GetFMChanFreq
</UL>

<P><STRONG><a name="[8e]"></a>FM_SetFMChanFreq</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, i2cfm.o(.text.FM_SetFMChanFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = FM_SetFMChanFreq &rArr; KT093x_User_FMTune &rArr; KT_FM_Tune &rArr; KT_AMFM_Mute &rArr; KT_Byte_Read &rArr; FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT093x_User_FMTune
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNewDebugData
</UL>

<P><STRONG><a name="[8f]"></a>FM_SetVolume</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, i2cfm.o(.text.FM_SetVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = FM_SetVolume &rArr; FM_WriteReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volume_Tick
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDS_Task
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XuLyPhimSetup
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNewDebugData
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNewBlackboxData
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rds_data_handle
</UL>

<P><STRONG><a name="[91]"></a>FM_Tick</STRONG> (Thumb, 632 bytes, Stack size 80 bytes, i2cfm.o(.text.FM_Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = FM_Tick &rArr; FM_GetRSSI &rArr; FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_get_ms
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_WriteReg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_ReadReg
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_GetVolume
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_GetSNR
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_GetRSSI
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_GetFMChanFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTimeout500ms
</UL>

<P><STRONG><a name="[90]"></a>FM_WriteReg</STRONG> (Thumb, 604 bytes, Stack size 48 bytes, i2cfm.o(.text.FM_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = FM_WriteReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_get_ms
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop_on_bus
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start_on_bus
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_addressing
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_clear
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Tick
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNewDebugData
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_SetVolume
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_Byte_Write
</UL>

<P><STRONG><a name="[6c]"></a>FindIndexOfChar</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, utilities.o(.text.FindIndexOfChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FindIndexOfChar
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyParameter
</UL>

<P><STRONG><a name="[73]"></a>GPS_GetPosition</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, gps.o(.text.GPS_GetPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPS_GetPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP32_ManagerTick
</UL>

<P><STRONG><a name="[72]"></a>GPS_IsValid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gps.o(.text.GPS_IsValid))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP32_ManagerTick
</UL>

<P><STRONG><a name="[94]"></a>GPS_ManagerTick</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, gps.o(.text.GPS_ManagerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = GPS_ManagerTick &rArr; GPS_ProcessNewMessage &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_get_ms
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Puts
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Reset
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_ProcessNewMessage
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>GPS_ProcessNewMessage</STRONG> (Thumb, 2020 bytes, Stack size 280 bytes, gpsutils.o(.text.GPS_ProcessNewMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = GPS_ProcessNewMessage &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumberFromString
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidCheckSum
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_ManagerTick
</UL>

<P><STRONG><a name="[97]"></a>GPS_Reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gps.o(.text.GPS_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_ManagerTick
</UL>

<P><STRONG><a name="[d6]"></a>GetHexNumberFromString</STRONG> (Thumb, 608 bytes, Stack size 28 bytes, utilities.o(.text.GetHexNumberFromString))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GetHexNumberFromString
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNewDebugData
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidCheckSum
</UL>

<P><STRONG><a name="[9b]"></a>GetNumberFromString</STRONG> (Thumb, 156 bytes, Stack size 28 bytes, utilities.o(.text.GetNumberFromString))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GetNumberFromString
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNewDebugData
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNewBlackboxData
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_ProcessNewMessage
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gd32e23x_it.o(.text.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardFault_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_hw_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>Hardware_XoaCoLoi</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, hardwaremanager.o(.text.Hardware_XoaCoLoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Hardware_XoaCoLoi &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_get_ms
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTimeout100ms
</UL>

<P><STRONG><a name="[a3]"></a>InitSystem</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, initsystem.o(.text.InitSystem))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = InitSystem &rArr; FM_Init &rArr; KT_AMFM_WakeUp &rArr; KT_AMFM_Init &rArr; KT_Byte_Read &rArr; FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_ReadConfig
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Config
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVariable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitIO
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScreen
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectResetReason
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>InitTimerForLED</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, led7.o(.text.InitTimerForLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = InitTimerForLED &rArr; timer_deinit &rArr; rcu_periph_reset_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_Init
</UL>

<P><STRONG><a name="[a9]"></a>InternalFlash_ReadConfig</STRONG> (Thumb, 476 bytes, Stack size 64 bytes, internalflash.o(.text.InternalFlash_ReadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = InternalFlash_ReadConfig &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_get_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystem
</UL>

<P><STRONG><a name="[b7]"></a>InternalFlash_WriteConfig</STRONG> (Thumb, 516 bytes, Stack size 64 bytes, internalflash.o(.text.InternalFlash_WriteConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = InternalFlash_WriteConfig &rArr; Delayms &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_get_ms
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNewBlackboxData
</UL>

<P><STRONG><a name="[85]"></a>KT0935_LowLevel_Init</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, i2cfm.o(.text.KT0935_LowLevel_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = KT0935_LowLevel_Init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_mode_addr_config
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clock_config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack_config
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Init
</UL>

<P><STRONG><a name="[89]"></a>KT093x_User_FMTune</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, i2cfm.o(.text.KT093x_User_FMTune))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = KT093x_User_FMTune &rArr; KT_FM_Tune &rArr; KT_AMFM_Mute &rArr; KT_Byte_Read &rArr; FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_FM_Tune
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XuLyPhimSetup
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_SetFMChanFreq
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNewBlackboxData
</UL>

<P><STRONG><a name="[bf]"></a>KT_AMFM_Init</STRONG> (Thumb, 844 bytes, Stack size 192 bytes, i2cfm.o(.text.KT_AMFM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = KT_AMFM_Init &rArr; KT_Byte_Read &rArr; FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_get_ms
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetWatchdog
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_Byte_Write
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_Byte_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_AMFM_WakeUp
</UL>

<P><STRONG><a name="[c3]"></a>KT_AMFM_Mute</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, i2cfm.o(.text.KT_AMFM_Mute))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = KT_AMFM_Mute &rArr; KT_Byte_Read &rArr; FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_Byte_Write
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_Byte_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_FM_Tune
</UL>

<P><STRONG><a name="[86]"></a>KT_AMFM_PreInit</STRONG> (Thumb, 292 bytes, Stack size 80 bytes, i2cfm.o(.text.KT_AMFM_PreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = KT_AMFM_PreInit &rArr; KT_Byte_Read &rArr; FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_get_ms
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_Byte_Write
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_Byte_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Init
</UL>

<P><STRONG><a name="[88]"></a>KT_AMFM_SetMode</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, i2cfm.o(.text.KT_AMFM_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = KT_AMFM_SetMode &rArr; KT_Byte_Read &rArr; FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_Byte_Write
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_Byte_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Init
</UL>

<P><STRONG><a name="[87]"></a>KT_AMFM_WakeUp</STRONG> (Thumb, 250 bytes, Stack size 80 bytes, i2cfm.o(.text.KT_AMFM_WakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = KT_AMFM_WakeUp &rArr; KT_AMFM_Init &rArr; KT_Byte_Read &rArr; FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_Byte_Write
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_Byte_Read
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_AMFM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Init
</UL>

<P><STRONG><a name="[c0]"></a>KT_Byte_Read</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, i2cfm.o(.text.KT_Byte_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = KT_Byte_Read &rArr; FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDS_Task
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_FM_Tune
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_AMFM_WakeUp
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_AMFM_SetMode
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_AMFM_PreInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_AMFM_Mute
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_AMFM_Init
</UL>

<P><STRONG><a name="[c1]"></a>KT_Byte_Write</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, i2cfm.o(.text.KT_Byte_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = KT_Byte_Write &rArr; FM_WriteReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_FM_Tune
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_FM_Deltn
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_AMFM_WakeUp
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_AMFM_SetMode
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_AMFM_PreInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_AMFM_Mute
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_AMFM_Init
</UL>

<P><STRONG><a name="[c4]"></a>KT_FM_Deltn</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, i2cfm.o(.text.KT_FM_Deltn))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = KT_FM_Deltn &rArr; KT_Byte_Write &rArr; FM_WriteReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_Byte_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_FM_Tune
</UL>

<P><STRONG><a name="[be]"></a>KT_FM_Tune</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, i2cfm.o(.text.KT_FM_Tune))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = KT_FM_Tune &rArr; KT_AMFM_Mute &rArr; KT_Byte_Read &rArr; FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_FM_Deltn
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_Byte_Write
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_Byte_Read
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_AMFM_Mute
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT093x_User_FMTune
</UL>

<P><STRONG><a name="[c7]"></a>Led7_DispFrequency</STRONG> (Thumb, 184 bytes, Stack size 28 bytes, led7.o(.text.Led7_DispFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Led7_DispFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_Tick
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispSetupMode
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNewBlackboxData
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispLocalMode
</UL>

<P><STRONG><a name="[cc]"></a>Led7_DispInteger</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, led7.o(.text.Led7_DispInteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Led7_DispInteger
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_Tick
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_Init
</UL>

<P><STRONG><a name="[c5]"></a>Led7_DispLocalMode</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, led7.o(.text.Led7_DispLocalMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Led7_DispLocalMode &rArr; Led7_DispSetupMode &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_get_ms
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispSetupMode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispFrequency
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispOFF
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispModeMIC
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispModeLineIn
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispModeIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_Tick
</UL>

<P><STRONG><a name="[d0]"></a>Led7_DispMode4G</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led7.o(.text.Led7_DispMode4G))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_Tick
</UL>

<P><STRONG><a name="[ca]"></a>Led7_DispModeIdle</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led7.o(.text.Led7_DispModeIdle))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispSetupMode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispLocalMode
</UL>

<P><STRONG><a name="[c9]"></a>Led7_DispModeLineIn</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led7.o(.text.Led7_DispModeLineIn))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispSetupMode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispLocalMode
</UL>

<P><STRONG><a name="[c8]"></a>Led7_DispModeMIC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led7.o(.text.Led7_DispModeMIC))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_Tick
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispSetupMode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispLocalMode
</UL>

<P><STRONG><a name="[d1]"></a>Led7_DispModeNone</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led7.o(.text.Led7_DispModeNone))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_Tick
</UL>

<P><STRONG><a name="[c6]"></a>Led7_DispOFF</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, led7.o(.text.Led7_DispOFF))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispLocalMode
</UL>

<P><STRONG><a name="[6a]"></a>Led7_DispSetupMode</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, led7.o(.text.Led7_DispSetupMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Led7_DispSetupMode &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_get_ms
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispFrequency
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispModeMIC
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispModeLineIn
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispModeIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Tick
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XuLyPhimSetup
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispLocalMode
</UL>

<P><STRONG><a name="[106]"></a>Led7_DispVolume</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, led7.o(.text.Led7_DispVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Led7_DispVolume
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volume_Tick
</UL>

<P><STRONG><a name="[aa]"></a>Led7_Init</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, led7.o(.text.Led7_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Led7_Init &rArr; Delayms &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispInteger
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerForLED
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystem
</UL>

<P><STRONG><a name="[cd]"></a>Led7_ScanSeg</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, led7.o(.text.Led7_ScanSeg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Led7_ScanSeg &rArr; Led7_PushData
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_get_ms
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_PushData
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>Led7_Tick</STRONG> (Thumb, 976 bytes, Stack size 80 bytes, led7.o(.text.Led7_Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Led7_Tick &rArr; Led7_DispLocalMode &rArr; Led7_DispSetupMode &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispFrequency
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispModeNone
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispModeMIC
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispMode4G
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispLocalMode
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispInteger
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTimeout500ms
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e23x_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e23x_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>RDS_Task</STRONG> (Thumb, 508 bytes, Stack size 88 bytes, i2cfm.o(.text.RDS_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = RDS_Task &rArr; decode &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_get_ms
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_SetVolume
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rds_data_handle
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rds_has_data
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_Byte_Read
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>ResetWatchdog</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hardwaremanager.o(.text.ResetWatchdog))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_AMFM_Init
</UL>

<P><STRONG><a name="[e3]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, segger_rtt.o(.text.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_debug_output
</UL>

<P><STRONG><a name="[e5]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, segger_rtt.o(.text.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e23x_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gd32e23x_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemManagementTask
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Decrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SystemInit</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, system_gd32e23x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SystemInit &rArr; system_clock_config &rArr; system_clock_72m_irc8m
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(.text)
</UL>
<P><STRONG><a name="[eb]"></a>SystemManagementTask</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, main.o(.text.SystemManagementTask))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[92]"></a>SystemReset</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hardwaremanager.o(.text.SystemReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemReset
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Tick
</UL>

<P><STRONG><a name="[14]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, led7.o(.text.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIMER2_IRQHandler &rArr; Led7_ScanSeg &rArr; Led7_PushData
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_ScanSeg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UART_Init</STRONG> (Thumb, 444 bytes, Stack size 88 bytes, driveruart.o(.text.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = UART_Init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwrb_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driveruart.o(.rodata.DriverUART)
</UL>
<P><STRONG><a name="[32]"></a>UART_Printf</STRONG> (Thumb, 496 bytes, Stack size 64 bytes, driveruart.o(.text.UART_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = UART_Printf &rArr; UART_itoa &rArr; UART_Putc &rArr; lwrb_write &rArr; lwrb_get_free
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_itoa
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Putc
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driveruart.o(.rodata.DriverUART)
</UL>
<P><STRONG><a name="[31]"></a>UART_Putb</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, driveruart.o(.text.UART_Putb))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = UART_Putb &rArr; UART_Putc &rArr; lwrb_write &rArr; lwrb_get_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driveruart.o(.rodata.DriverUART)
</UL>
<P><STRONG><a name="[2f]"></a>UART_Putc</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, driveruart.o(.text.UART_Putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART_Putc &rArr; lwrb_write &rArr; lwrb_get_free
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwrb_write
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwrb_get_free
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_itoa
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Putb
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driveruart.o(.rodata.DriverUART)
</UL>
<P><STRONG><a name="[30]"></a>UART_Puts</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, driveruart.o(.text.UART_Puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = UART_Puts &rArr; UART_Putc &rArr; lwrb_write &rArr; lwrb_get_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Putc
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_ManagerTick
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP32_ManagerTick
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driveruart.o(.rodata.DriverUART)
</UL>
<P><STRONG><a name="[fc]"></a>UART_itoa</STRONG> (Thumb, 284 bytes, Stack size 72 bytes, driveruart.o(.text.UART_itoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = UART_itoa &rArr; UART_Putc &rArr; lwrb_write &rArr; lwrb_get_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Putc
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>

<P><STRONG><a name="[1e]"></a>USART0_IRQHandler</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, gps.o(.text.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = USART0_IRQHandler &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_get_ms
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_AddNewData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USART1_IRQHandler</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, esp32datalayer.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USART1_IRQHandler &rArr; driver_uart_get_new_data_to_send &rArr; lwrb_read &rArr; lwrb_get_full
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_get_new_data_to_send
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlackBoxAddData
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>ValidCheckSum</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, gpsutils.o(.text.ValidCheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ValidCheckSum &rArr; GetHexNumberFromString
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHexNumberFromString
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_ProcessNewMessage
</UL>

<P><STRONG><a name="[dc]"></a>Volume_Tick</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, button.o(.text.Volume_Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Volume_Tick &rArr; FM_SetVolume &rArr; FM_WriteReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_get_ms
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispVolume
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVGADCVolume
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_SetVolume
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTimeout10ms
</UL>

<P><STRONG><a name="[a5]"></a>WatchDogInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hardwaremanager.o(.text.WatchDogInit))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystem
</UL>

<P><STRONG><a name="[62]"></a>adc_calibration_enable</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gd32e23x_adc.o(.text.adc_calibration_enable))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[5d]"></a>adc_channel_length_config</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, gd32e23x_adc.o(.text.adc_channel_length_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_channel_length_config
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[5c]"></a>adc_data_alignment_config</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, gd32e23x_adc.o(.text.adc_data_alignment_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_data_alignment_config
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[60]"></a>adc_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32e23x_adc.o(.text.adc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[5f]"></a>adc_external_trigger_config</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, gd32e23x_adc.o(.text.adc_external_trigger_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_external_trigger_config
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[5b]"></a>adc_external_trigger_source_config</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, gd32e23x_adc.o(.text.adc_external_trigger_source_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_external_trigger_source_config
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[db]"></a>adc_flag_clear</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, gd32e23x_adc.o(.text.adc_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTimeout10ms
</UL>

<P><STRONG><a name="[da]"></a>adc_flag_get</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gd32e23x_adc.o(.text.adc_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTimeout10ms
</UL>

<P><STRONG><a name="[5e]"></a>adc_regular_channel_config</STRONG> (Thumb, 348 bytes, Stack size 36 bytes, gd32e23x_adc.o(.text.adc_regular_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = adc_regular_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[63]"></a>adc_software_trigger_enable</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, gd32e23x_adc.o(.text.adc_software_trigger_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_software_trigger_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTimeout10ms
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[5a]"></a>adc_special_function_config</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, gd32e23x_adc.o(.text.adc_special_function_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_special_function_config
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[67]"></a>app_debug_get_ms</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, app_debug.o(.text.app_debug_get_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_debug_get_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volume_Tick
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDS_Task
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_XoaCoLoi
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_ManagerTick
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Tick
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP32_ManagerTick
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Tick
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispSetupMode
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XuLyPhimSetup
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_ReadConfig
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_WriteReg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_ReadReg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNewDebugData
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_WriteConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNewBlackboxData
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispLocalMode
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rds_data_handle
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_AMFM_PreInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_AMFM_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_GetStatus
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode
</UL>

<P><STRONG><a name="[11c]"></a>app_debug_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_debug.o(.text.app_debug_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_debug_init
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>app_debug_print_raw</STRONG> (Thumb, 1348 bytes, Stack size 96 bytes, app_debug.o(.text.app_debug_print_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_putc
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_skip_atoi
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_number
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strnlen
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volume_Tick
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDS_Task
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystem
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_XoaCoLoi
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_ManagerTick
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Tick
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP32_ManagerTick
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Tick
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispSetupMode
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XuLyPhimSetup
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_ReadConfig
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScreen
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_WriteReg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_ReadReg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNewDebugData
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_WriteConfig
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_SetVolume
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNewBlackboxData
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispLocalMode
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rds_data_handle
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_AMFM_PreInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT_AMFM_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_GetVolume
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_GetStatus
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_GetSNR
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_GetRSSI
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_GetFMChanFreq
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode
</UL>

<P><STRONG><a name="[109]"></a>app_debug_putc</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, app_debug.o(.text.app_debug_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_debug_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_number
</UL>

<P><STRONG><a name="[11d]"></a>app_debug_register_callback_print</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, app_debug.o(.text.app_debug_register_callback_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_debug_register_callback_print
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>app_wdt_feed</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_wdt.o(.text.app_wdt_feed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_wdt_feed
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_counter_reload
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTimeout100ms
</UL>

<P><STRONG><a name="[10e]"></a>app_wdt_start</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_wdt.o(.text.app_wdt_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = app_wdt_start &rArr; fwdgt_config
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_flag_get
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_all_reset_flag_clear
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_enable
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_config
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>board_hw_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board_hw.o(.text.board_hw_reset))
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[e1]"></a>check_rds_has_data</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, i2cfm.o(.text.check_rds_has_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = check_rds_has_data
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDS_Task
</UL>

<P><STRONG><a name="[103]"></a>driver_uart_get_new_data_to_send</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, driveruart.o(.text.driver_uart_get_new_data_to_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = driver_uart_get_new_data_to_send &rArr; lwrb_read &rArr; lwrb_get_full
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwrb_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>fmc_flag_clear</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, gd32e23x_fmc.o(.text.fmc_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Init
</UL>

<P><STRONG><a name="[ba]"></a>fmc_lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32e23x_fmc.o(.text.fmc_lock))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_WriteConfig
</UL>

<P><STRONG><a name="[b8]"></a>fmc_page_erase</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gd32e23x_fmc.o(.text.fmc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = fmc_page_erase &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_WriteConfig
</UL>

<P><STRONG><a name="[117]"></a>fmc_ready_wait</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, gd32e23x_fmc.o(.text.fmc_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>

<P><STRONG><a name="[118]"></a>fmc_state_get</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, gd32e23x_fmc.o(.text.fmc_state_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>

<P><STRONG><a name="[b5]"></a>fmc_unlock</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gd32e23x_fmc.o(.text.fmc_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Init
</UL>

<P><STRONG><a name="[b9]"></a>fmc_word_program</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, gd32e23x_fmc.o(.text.fmc_word_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_WriteConfig
</UL>

<P><STRONG><a name="[10f]"></a>fwdgt_config</STRONG> (Thumb, 232 bytes, Stack size 36 bytes, gd32e23x_fwdgt.o(.text.fwdgt_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fwdgt_config
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_wdt_start
</UL>

<P><STRONG><a name="[10d]"></a>fwdgt_counter_reload</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32e23x_fwdgt.o(.text.fwdgt_counter_reload))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_wdt_feed
</UL>

<P><STRONG><a name="[110]"></a>fwdgt_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e23x_fwdgt.o(.text.fwdgt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_wdt_start
</UL>

<P><STRONG><a name="[bb]"></a>gpio_af_set</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, gd32e23x_gpio.o(.text.gpio_af_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT0935_LowLevel_Init
</UL>

<P><STRONG><a name="[a2]"></a>gpio_bit_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32e23x_gpio.o(.text.gpio_bit_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystem
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitIO
</UL>

<P><STRONG><a name="[a7]"></a>gpio_bit_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32e23x_gpio.o(.text.gpio_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystem
</UL>

<P><STRONG><a name="[cb]"></a>gpio_bit_write</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, gd32e23x_gpio.o(.text.gpio_bit_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_Tick
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispLocalMode
</UL>

<P><STRONG><a name="[66]"></a>gpio_input_bit_get</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, gd32e23x_gpio.o(.text.gpio_input_bit_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Tick
</UL>

<P><STRONG><a name="[59]"></a>gpio_mode_set</STRONG> (Thumb, 144 bytes, Stack size 28 bytes, gd32e23x_gpio.o(.text.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitIO
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT0935_LowLevel_Init
</UL>

<P><STRONG><a name="[a1]"></a>gpio_output_options_set</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, gd32e23x_gpio.o(.text.gpio_output_options_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_output_options_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitIO
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT0935_LowLevel_Init
</UL>

<P><STRONG><a name="[80]"></a>i2c_ack_config</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gd32e23x_i2c.o(.text.i2c_ack_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_ack_config
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_ReadReg
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT0935_LowLevel_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_GetStatus
</UL>

<P><STRONG><a name="[8d]"></a>i2c_ackpos_config</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gd32e23x_i2c.o(.text.i2c_ackpos_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_ackpos_config
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_ReadReg
</UL>

<P><STRONG><a name="[bc]"></a>i2c_clock_config</STRONG> (Thumb, 456 bytes, Stack size 40 bytes, gd32e23x_i2c.o(.text.i2c_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT0935_LowLevel_Init
</UL>

<P><STRONG><a name="[8c]"></a>i2c_data_receive</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, gd32e23x_i2c.o(.text.i2c_data_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i2c_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_ReadReg
</UL>

<P><STRONG><a name="[8b]"></a>i2c_data_transmit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32e23x_i2c.o(.text.i2c_data_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_WriteReg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_ReadReg
</UL>

<P><STRONG><a name="[8a]"></a>i2c_enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32e23x_i2c.o(.text.i2c_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i2c_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_ReadReg
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT0935_LowLevel_Init
</UL>

<P><STRONG><a name="[81]"></a>i2c_flag_clear</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gd32e23x_i2c.o(.text.i2c_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_WriteReg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_ReadReg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_GetStatus
</UL>

<P><STRONG><a name="[7d]"></a>i2c_flag_get</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, gd32e23x_i2c.o(.text.i2c_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_WriteReg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_ReadReg
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT0935_LowLevel_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_GetStatus
</UL>

<P><STRONG><a name="[7f]"></a>i2c_master_addressing</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, gd32e23x_i2c.o(.text.i2c_master_addressing))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_master_addressing
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_WriteReg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_ReadReg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_GetStatus
</UL>

<P><STRONG><a name="[bd]"></a>i2c_mode_addr_config</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, gd32e23x_i2c.o(.text.i2c_mode_addr_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = i2c_mode_addr_config
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT0935_LowLevel_Init
</UL>

<P><STRONG><a name="[7e]"></a>i2c_start_on_bus</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, gd32e23x_i2c.o(.text.i2c_start_on_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i2c_start_on_bus
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_WriteReg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_ReadReg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_GetStatus
</UL>

<P><STRONG><a name="[82]"></a>i2c_stop_on_bus</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, gd32e23x_i2c.o(.text.i2c_stop_on_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i2c_stop_on_bus
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_WriteReg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_ReadReg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_GetStatus
</UL>

<P><STRONG><a name="[d4]"></a>isValidFreq</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, esp32datalayer.o(.text.isValidFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = isValidFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNewBlackboxData
</UL>

<P><STRONG><a name="[fd]"></a>lwrb_get_free</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, lwrb.o(.text.lwrb_get_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lwrb_get_free
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwrb_write
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Putc
</UL>

<P><STRONG><a name="[11a]"></a>lwrb_get_full</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, lwrb.o(.text.lwrb_get_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lwrb_get_full
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwrb_read
</UL>

<P><STRONG><a name="[f1]"></a>lwrb_init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lwrb.o(.text.lwrb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwrb_init
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[116]"></a>lwrb_read</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, lwrb.o(.text.lwrb_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lwrb_read &rArr; lwrb_get_full
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwrb_get_full
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_get_new_data_to_send
</UL>

<P><STRONG><a name="[fe]"></a>lwrb_write</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, lwrb.o(.text.lwrb_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lwrb_write &rArr; lwrb_get_free
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwrb_get_free
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Putc
</UL>

<P><STRONG><a name="[22]"></a>main</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = main &rArr; InitSystem &rArr; FM_Init &rArr; KT_AMFM_WakeUp &rArr; KT_AMFM_Init &rArr; KT_Byte_Read &rArr; FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_wdt_start
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_register_callback_print
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDS_Task
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystem
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_ManagerTick
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTimeout500ms
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTimeout10ms
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTimeout100ms
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTimeout1000ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[b3]"></a>nvic_irq_enable</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, gd32e23x_misc.o(.text.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nvic_irq_enable &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerForLED
</UL>

<P><STRONG><a name="[ee]"></a>nvic_vector_table_set</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gd32e23x_misc.o(.text.nvic_vector_table_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvic_vector_table_set
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[de]"></a>rcu_adc_clock_config</STRONG> (Thumb, 392 bytes, Stack size 16 bytes, gd32e23x_rcu.o(.text.rcu_adc_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rcu_adc_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Config
</UL>

<P><STRONG><a name="[112]"></a>rcu_all_reset_flag_clear</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32e23x_rcu.o(.text.rcu_all_reset_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_wdt_start
</UL>

<P><STRONG><a name="[119]"></a>rcu_clock_freq_get</STRONG> (Thumb, 644 bytes, Stack size 108 bytes, gd32e23x_rcu.o(.text.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clock_config
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[111]"></a>rcu_flag_get</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gd32e23x_rcu.o(.text.rcu_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_wdt_start
</UL>

<P><STRONG><a name="[ac]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, gd32e23x_rcu.o(.text.rcu_periph_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Config
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerForLED
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT0935_LowLevel_Init
</UL>

<P><STRONG><a name="[122]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, gd32e23x_rcu.o(.text.rcu_periph_reset_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>

<P><STRONG><a name="[121]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, gd32e23x_rcu.o(.text.rcu_periph_reset_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>

<P><STRONG><a name="[e2]"></a>rds_data_handle</STRONG> (Thumb, 380 bytes, Stack size 40 bytes, i2cfm.o(.text.rds_data_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = rds_data_handle &rArr; FM_SetVolume &rArr; FM_WriteReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_get_ms
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_SetVolume
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDS_Task
</UL>

<P><STRONG><a name="[28]"></a>sys_get_ms</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text.sys_get_ms))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_ScanSeg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[11b]"></a>systick_config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, systick.o(.text.systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = systick_config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>timer_deinit</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, gd32e23x_timer.o(.text.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = timer_deinit &rArr; rcu_periph_reset_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerForLED
</UL>

<P><STRONG><a name="[b2]"></a>timer_enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32e23x_timer.o(.text.timer_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = timer_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerForLED
</UL>

<P><STRONG><a name="[af]"></a>timer_init</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, gd32e23x_timer.o(.text.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerForLED
</UL>

<P><STRONG><a name="[b1]"></a>timer_interrupt_enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32e23x_timer.o(.text.timer_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerForLED
</UL>

<P><STRONG><a name="[b0]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32e23x_timer.o(.text.timer_interrupt_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerForLED
</UL>

<P><STRONG><a name="[f0]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gd32e23x_timer.o(.text.timer_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>timer_struct_para_init</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, gd32e23x_timer.o(.text.timer_struct_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = timer_struct_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerForLED
</UL>

<P><STRONG><a name="[f6]"></a>usart_baudrate_set</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, gd32e23x_usart.o(.text.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[100]"></a>usart_data_receive</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, gd32e23x_usart.o(.text.usart_data_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usart_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>usart_data_transmit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gd32e23x_usart.o(.text.usart_data_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[f2]"></a>usart_deinit</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gd32e23x_usart.o(.text.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = usart_deinit &rArr; rcu_periph_reset_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[f9]"></a>usart_enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32e23x_usart.o(.text.usart_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[9f]"></a>usart_flag_clear</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gd32e23x_usart.o(.text.usart_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_XoaCoLoi
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>usart_flag_get</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, gd32e23x_usart.o(.text.usart_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_XoaCoLoi
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[fb]"></a>usart_interrupt_disable</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gd32e23x_usart.o(.text.usart_interrupt_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>usart_interrupt_enable</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gd32e23x_usart.o(.text.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Putc
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[ff]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 102 bytes, Stack size 28 bytes, gd32e23x_usart.o(.text.usart_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usart_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>usart_parity_config</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gd32e23x_usart.o(.text.usart_parity_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_parity_config
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[f7]"></a>usart_receive_config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32e23x_usart.o(.text.usart_receive_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_receive_config
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[f4]"></a>usart_stop_bit_set</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gd32e23x_usart.o(.text.usart_stop_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_stop_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[f8]"></a>usart_transmit_config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32e23x_usart.o(.text.usart_transmit_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_transmit_config
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[f3]"></a>usart_word_length_set</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gd32e23x_usart.o(.text.usart_word_length_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_word_length_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[123]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[13f]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[140]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[141]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[71]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP32_ManagerTick
</UL>

<P><STRONG><a name="[50]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[12a]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[142]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[143]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[144]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[12b]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[57]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[9a]"></a>atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_ProcessNewMessage
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d7]"></a>ProcessTimeout1000ms</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text.ProcessTimeout1000ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = ProcessTimeout1000ms &rArr; ESP32_ManagerTick &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP32_ManagerTick
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>ProcessTimeout100ms</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text.ProcessTimeout100ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ProcessTimeout100ms &rArr; Button_Tick &rArr; XuLyPhimSetup &rArr; KT093x_User_FMTune &rArr; KT_FM_Tune &rArr; KT_AMFM_Mute &rArr; KT_Byte_Read &rArr; FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_wdt_feed
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_XoaCoLoi
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Tick
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>ProcessTimeout10ms</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(.text.ProcessTimeout10ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = ProcessTimeout10ms &rArr; ESP32_UART_Tick &rArr; ProcessNewBlackboxData &rArr; KT093x_User_FMTune &rArr; KT_FM_Tune &rArr; KT_AMFM_Mute &rArr; KT_Byte_Read &rArr; FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_software_trigger_enable
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_flag_get
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_flag_clear
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volume_Tick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP32_UART_Tick
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>ProcessTimeout500ms</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text.ProcessTimeout500ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ProcessTimeout500ms &rArr; FM_Tick &rArr; FM_GetRSSI &rArr; FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_Tick
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Tick
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29]"></a>rtt_debug_output</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text.rtt_debug_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rtt_debug_output &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[e9]"></a>SysTick_Config</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, systick.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[ea]"></a>__NVIC_SetPriority</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, systick.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[120]"></a>system_clock_72m_irc8m</STRONG> (Thumb, 224 bytes, Stack size 12 bytes, system_gd32e23x.o(.text.system_clock_72m_irc8m))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = system_clock_72m_irc8m
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[ed]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32e23x.o(.text.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = system_clock_config &rArr; system_clock_72m_irc8m
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_72m_irc8m
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[11f]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, gd32e23x_misc.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[11e]"></a>__NVIC_SetPriority</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, gd32e23x_misc.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[113]"></a>__NVIC_SystemReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, board_hw.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_hw_reset
</UL>

<P><STRONG><a name="[102]"></a>BlackBoxAddData</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, esp32datalayer.o(.text.BlackBoxAddData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BlackBoxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[77]"></a>ProcessNewBlackboxData</STRONG> (Thumb, 1408 bytes, Stack size 112 bytes, esp32datalayer.o(.text.ProcessNewBlackboxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = ProcessNewBlackboxData &rArr; KT093x_User_FMTune &rArr; KT_FM_Tune &rArr; KT_AMFM_Mute &rArr; KT_Byte_Read &rArr; FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_get_ms
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidFreq
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispFrequency
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT093x_User_FMTune
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_WriteConfig
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumberFromString
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_SetVolume
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCRC16
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP32_UART_Tick
</UL>

<P><STRONG><a name="[d3]"></a>__NVIC_SystemReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, esp32datalayer.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNewBlackboxData
</UL>

<P><STRONG><a name="[2d]"></a>DebugAddData</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, debug.o(.text.DebugAddData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DebugAddData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug.o(.rodata.DriverDebug)
</UL>
<P><STRONG><a name="[2b]"></a>DebugInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, debug.o(.text.DebugInit))
<BR>[Address Reference Count : 1]<UL><LI> debug.o(.rodata.DriverDebug)
</UL>
<P><STRONG><a name="[2c]"></a>DebugTick</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, debug.o(.text.DebugTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = DebugTick &rArr; ProcessNewDebugData &rArr; FM_SetFMChanFreq &rArr; KT093x_User_FMTune &rArr; KT_FM_Tune &rArr; KT_AMFM_Mute &rArr; KT_Byte_Read &rArr; FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNewDebugData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug.o(.rodata.DriverDebug)
</UL>
<P><STRONG><a name="[6d]"></a>ProcessNewDebugData</STRONG> (Thumb, 592 bytes, Stack size 160 bytes, debug.o(.text.ProcessNewDebugData))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = ProcessNewDebugData &rArr; FM_SetFMChanFreq &rArr; KT093x_User_FMTune &rArr; KT_FM_Tune &rArr; KT_AMFM_Mute &rArr; KT_Byte_Read &rArr; FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_get_ms
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_WriteReg
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_SetFMChanFreq
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_ReadReg
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHexNumberFromString
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyParameter
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumberFromString
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_SetVolume
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugTick
</UL>

<P><STRONG><a name="[d5]"></a>__NVIC_SystemReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, debug.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNewDebugData
</UL>

<P><STRONG><a name="[ef]"></a>__NVIC_SystemReset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hardwaremanager.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
</UL>

<P><STRONG><a name="[58]"></a>ADC_Config</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, initsystem.o(.text.ADC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ADC_Config &rArr; Delayms &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_special_function_config
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_channel_config
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_source_config
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_config
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_data_alignment_config
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_length_config
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_enable
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_software_trigger_enable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystem
</UL>

<P><STRONG><a name="[6f]"></a>DrawScreen</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, initsystem.o(.text.DrawScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = DrawScreen &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystem
</UL>

<P><STRONG><a name="[a0]"></a>InitIO</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, initsystem.o(.text.InitIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitIO &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystem
</UL>

<P><STRONG><a name="[a6]"></a>InitVariable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, initsystem.o(.text.InitVariable))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystem
</UL>

<P><STRONG><a name="[a4]"></a>RCC_Config</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, initsystem.o(.text.RCC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_Config &rArr; rcu_adc_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_adc_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystem
</UL>

<P><STRONG><a name="[69]"></a>XuLyPhimSetup</STRONG> (Thumb, 532 bytes, Stack size 32 bytes, button.o(.text.XuLyPhimSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = XuLyPhimSetup &rArr; KT093x_User_FMTune &rArr; KT_FM_Tune &rArr; KT_AMFM_Mute &rArr; KT_Byte_Read &rArr; FM_ReadReg &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_get_ms
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_DispSetupMode
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KT093x_User_FMTune
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_SetVolume
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Tick
</UL>

<P><STRONG><a name="[e0]"></a>decode</STRONG> (Thumb, 468 bytes, Stack size 176 bytes, i2cfm.o(.text.decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = decode &rArr; app_debug_print_raw &rArr; ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_get_ms
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_zoneId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_int_from_ascii
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDS_Task
</UL>

<P><STRONG><a name="[114]"></a>get_int_from_ascii</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, i2cfm.o(.text.get_int_from_ascii))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_int_from_ascii
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode
</UL>

<P><STRONG><a name="[115]"></a>get_zoneId</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, i2cfm.o(.text.get_zoneId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_zoneId
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode
</UL>

<P><STRONG><a name="[ce]"></a>Led7_PushData</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, led7.o(.text.Led7_PushData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Led7_PushData
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led7_ScanSeg
</UL>

<P><STRONG><a name="[b4]"></a>InternalFlash_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, internalflash.o(.text.InternalFlash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InternalFlash_Init &rArr; fmc_flag_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_WriteConfig
</UL>

<P><STRONG><a name="[101]"></a>GPS_AddNewData</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, gps.o(.text.GPS_AddNewData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPS_AddNewData
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[e4]"></a>_DoInit</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, segger_rtt.o(.text._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[e6]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, segger_rtt.o(.text._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[e8]"></a>_WriteBlocking</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, segger_rtt.o(.text._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[e7]"></a>_WriteNoCheck</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, segger_rtt.o(.text._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[10b]"></a>__strnlen</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, app_debug.o(.text.__strnlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __strnlen
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
</UL>

<P><STRONG><a name="[10c]"></a>ee_number</STRONG> (Thumb, 660 bytes, Stack size 128 bytes, app_debug.o(.text.ee_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ee_number &rArr; app_debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
</UL>

<P><STRONG><a name="[10a]"></a>ee_skip_atoi</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, app_debug.o(.text.ee_skip_atoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ee_skip_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_print_raw
</UL>

<P><STRONG><a name="[125]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[124]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[128]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[127]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2a]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[4d]"></a>_local_sscanf</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[53]"></a>_fp_value</STRONG> (Thumb, 286 bytes, Stack size 72 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
